#!/usr/bin/python3

'''
Python3 元组
'''

'''
Python 的元组与列表类似，不同之处在于元组的元素不能修改。
元组使用小括号，列表使用方括号。
元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。
'''
tup1 = ('Google', 'Runoob', 1997, 2000)
tup2 = (1, 2, 3, 4, 5 )
tup3 = "a", "b", "c", "d"   #  不需要括号也可以
print(type(tup3))

# 创建空元组
tup1 = ()

# 元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用
tup1 = (50)
print(type(tup1))  # 不加逗号，类型为整型


tup1 = (50,)
print(type(tup1))  # 加上逗号，类型为元组





'''
访问元组
'''
'''
元组可以使用下标索引来访问元组中的值
'''
tup1 = ('Google', 'Runoob', 1997, 2000)
tup2 = (1, 2, 3, 4, 5, 6, 7)

print("tup1[0]: ", tup1[0])
print("tup2[1:5]: ", tup2[1:5])





'''
修改元组
元组中的元素值是不允许修改的，但我们可以对元组进行连接组合
'''
tup1 = (12, 34.56)
tup2 = ('abc', 'xyz')

# 以下修改元组元素操作是非法的。
# tup1[0] = 100

# 创建一个新的元组
tup3 = tup1 + tup2
print(tup3)





'''
删除元组
元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组
'''
tup = ('Google', 'Runoob', 1997, 2000)

print(tup)
del tup
print("删除后的元组 tup : ")
#print(tup)  报错






'''
元组运算符
'''

'''
与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。

Python 表达式	                    结果	                                       描述
len((1, 2, 3))	                    3	                                        计算元素个数
(1, 2, 3) + (4, 5, 6)	            (1, 2, 3, 4, 5, 6)	                        连接
('Hi!',) * 4	                    ('Hi!', 'Hi!', 'Hi!', 'Hi!')	            复制
3 in (1, 2, 3)	                    True	                                    元素是否存在
for x in (1, 2, 3): print (x,)	    1 2 3	                                    迭代
'''






'''
关于元组是不可变的
所谓元组的不可变指的是元组所指向的内存中的内容不可变。

>>> tup = ('r', 'u', 'n', 'o', 'o', 'b')
>>> tup[0] = 'g'     # 不支持修改元素
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> id(tup)     # 查看内存地址
4440687904
>>> tup = (1,2,3)
>>> id(tup)
4441088800    # 内存地址不一样了
从以上实例可以看出，重新赋值的元组 tup，绑定到新的对象了，不是修改了原来的对象。
'''



